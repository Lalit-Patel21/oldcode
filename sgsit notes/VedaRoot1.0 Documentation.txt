VedaRoot1.0
├── controllers
│   ├── admin.controller.js
│   ├── user.controller.js
│   ├── product.controller.js
│   ├── cart.controller.js
│   ├── order.controller.js│  
│   ├── category.controller.js
│   ├── yoga.controller.js
│   ├── homeremendy.controller.js
│   ├── contact.controller.js
│   ├── doctor.controller.js
│   ├── payment.controller.js
│   ├── appoitment.controller.js
│   ├── consultaion.controller.js
│   ├── disease.controller.js
├── config
│   ├── dbConfig.js
│   ├── envConfig.js
├── middleware
│   ├── authMiddleware.js
│   ├── errorHandler.js
├── models
│   ├── admin.model.js
│   ├── user.model.js
│   ├── product.model.js
│   ├── cart.model.js
│   ├── order.model.js
│   ├── payment.model.js
│   ├── appointment.model.js
│   ├── category.model.js
│   ├── consultaion.model.js
│   ├── disease.model.js
│   ├── doctor.model.js
│   ├── yoga.model.js
│   ├── homeremendy.model.js
│   ├── contact.model.js

├── routes
│   ├── admin.routes.js
│   ├── user.routes.js
│   ├── product.routes.js
│   ├── cart.routes.js
│   ├── order.routes.js│  
│   ├── category.routes.js
│   ├── yoga.routes.js
│   ├── homeremendy.routes.js
│   ├── contact.routes.js
│   ├── doctor.routes.js
│   ├── payment.routes.js
│   ├── appoitment.routes.js
│   ├── consultaion.routes.js
│   ├── disease.routes.js

├── services
│   ├── admin.services.js
│   ├── user.services.js
│   ├── product.services.js
│   ├── cart.services.js
│   ├── order.services.js│  
│   ├── category.services.js
│   ├── yoga.services.js
│   ├── homeremendy.services.js
│   ├── contact.services.js
│   ├── doctor.services.js
│   ├── payment.services.js
│   ├── appoitment.services.js
│   ├── consultaion.services.js
│   ├── disease.services.js
├── vedaRootServer.js
├── .env
├── .gitignore
├── README.md
├── package.json


Models

import mongoose from "mongoose";
const AdminSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    lastLogin: { type: Date, default: Date.now },
  },
  { timestamps: true }
);
export const Admin = mongoose.model("Admin", AdminSchema);



import mongoose from "mongoose";
const UserSchema = new mongoose.Schema(
  {
    userName: { type: String, required: true },
    email: { type: String, required: true, unique: true, lowercase: true },
    password: { type: String, required: true },
    contactNo: { type: String, unique: true },
    address: String,
    city: String,
    state: String,
    pinCode: String,
    lastLogin: { type: Date, default: Date.now },
    gender: { type: String, enum: ["Male", "Female", "Other"] },
    cartId: { type: mongoose.Schema.Types.ObjectId, ref: "Cart" },
  },
  { timestamps: true }
);
export const User = mongoose.model("User", UserSchema);


import mongoose from "mongoose";
const CategorySchema = new mongoose.Schema(
  {
    categoryName: { type: String, required: true, unique: true },
    description: String,
    imageUrl: String,
  },
  { timestamps: true }
);
export const Category = mongoose.model("Category", CategorySchema);


import mongoose from "mongoose";
const ProductSchema = new mongoose.Schema({
  productName: { type: String, required: true },
  description: String,
  price: { type: Number, required: true },
  discountPrice: Number,
  stock: { type: Number, required: true },
  rating: Number,
  imageUrl: String,
  categoryId: { type: mongoose.Schema.Types.ObjectId, ref: "Category" },
  brand: String,
  tags: [String],
});
export const Product = mongoose.model("Product", ProductSchema);


import mongoose from "mongoose";
const CartSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  items: [
    {
      productId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Product",
        required: true,
      },
      quantity: { type: Number, default: 1 },
      price: { type: Number, required: true },
    },
  ],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});
export const Cart = mongoose.model("Cart", CartSchema);


import mongoose from "mongoose";
const PaymentDetailsSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  orderId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Order",
    required: true,
  },
  razorpay_orderId: String,
  razorpay_paymentId: String,
  razorpay_signature: String,
  payment_status: {
    type: String,
    enum: ["Paid", "Pending", "Failed"],
    required: true,
  },
  payment_method: {
    type: String,
    enum: ["Credit Card", "Debit Card", "COD", "UPI", "Net Banking"],
  },
  amount: { type: Number, required: true },
});

export const PaymentDetails = mongoose.model(
  "PaymentDetails",
  PaymentDetailsSchema
);

import mongoose from "mongoose";
const OrderSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  orderDate: { type: Date, default: Date.now },
  totalAmount: { type: Number, required: true },
  status: {
    type: String,
    enum: ["Pending", "Completed", "Cancelled"],
    default: "Pending",
  },
  shippingAddress: String,
  city: String,
  state: String,
  fullName: String,
  userContact: String,
  pinCode: String,
  items: [
    {
      productId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Product",
        required: true,
      },
      quantity: { type: Number, required: true },
      price: { type: Number, required: true },
      discount: Number,
    },
  ],
});

export const Order = mongoose.model("Order", OrderSchema);

import mongoose from "mongoose";

const DoctorSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  contactNo: { type: String, required: true, unique: true },
  registrationNo: { type: String, unique: true },
  specialization: String,
  details: {
    time: String,
    qualification: String,
    experienceYears: Number,
    clinicName: String,
    clinicAddress: String,
    consultationFee: Number,
    availability: [String],
    profilePicture: String,
    gender: String,
    bio: String,
  },
});
export const Doctor = mongoose.model("Doctor", DoctorSchema);


import mongoose from "mongoose";
const DiseaseSchema = new mongoose.Schema({
  diseaseName: { type: String, required: true },
  description: String,
  symptoms: [String],
  causes: [String],
  treatment: [String],
  categoryId: { type: mongoose.Schema.Types.ObjectId, ref: "Category" },
  precautions: [String],
  imageUrl: String,
});
export const Disease = mongoose.model("Disease", DiseaseSchema);


import mongoose from "mongoose";
const ConsultationSchema = new mongoose.Schema({
  name: String,
  doctorId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Doctor",
    required: true,
  },
  consultationDate: { type: Date, default: Date.now },
  status: {
    type: String,
    enum: ["Pending", "Completed", "Cancelled"],
    default: "Pending",
  },
  phoneNo: String,
  message: String,
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
});

export const Consultation = mongoose.model("Consultation", ConsultationSchema);


import mongoose from "mongoose";
const AppointmentSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  doctorId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Doctor",
    required: true,
  },
  appointmentDateTime: { type: Date, required: true },
  status: {
    type: String,
    enum: ["Pending", "Confirmed", "Cancelled"],
    default: "Pending",
  },
  phoneNo: String,
  name: String,
  age: Number,
  gender: String,
  email: String,
});

export const Appointment = mongoose.model("Appointment", AppointmentSchema);



import mongoose from "mongoose";
const HomeRemedySchema = new mongoose.Schema(
  {
    homeremediesId: {
      type: mongoose.Schema.Types.ObjectId,
      default: () => new mongoose.Types.ObjectId(),
      unique: true,
    },
    homeremedyName: {
      type: String,
      required: true,
      trim: true,
    },
    ingredients: {
      type: [String], // List of ingredients required for the remedy
      required: true,
    },
    description: {
      type: String,
      required: true,
    },
    instructions: {
      type: [String], // Steps to prepare the remedy
      required: true,
    },
    imageUrl: {
      type: String, // URL of the remedy's image
      required: false,
    },
    caution: {
      type: String, // Any cautionary details
    },
    categoryId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category", // Foreign Key reference to Category
      required: true,
    },
  },
  { timestamps: true }
);
export const HomeRemedy = mongoose.model("HomeRemedy", HomeRemedySchema);

import mongoose from "mongoose";

const YogaSchema = new mongoose.Schema(
  {
    id: {
      type: mongoose.Schema.Types.ObjectId,
      default: () => new mongoose.Types.ObjectId(),
      unique: true,
    },
    yogaName: {
      type: String,
      required: true,
      trim: true,
    },
    benefits: {
      type: [String], // List of health benefits
      required: true,
    },
    description: {
      type: String,
      required: true,
    },
    imageUrl: {
      type: String, // URL of the yoga image
      required: false,
    },
    categoryId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category", // Foreign Key reference to Category
      required: true,
    },
    videoUrl: {
      type: String, // URL of the yoga practice video
    },
    instructions: {
      type: [String], // Steps to perform the yoga practice
      required: true,
    },
  },
  { timestamps: true }
);
export const Yoga = mongoose.model("Yoga", YogaSchema);


import mongoose from "mongoose";

const ContactSchema = new mongoose.Schema(
  {
    // contactId: {
    //   type: mongoose.Schema.Types.ObjectId,
    //   default: () => new mongoose.Types.ObjectId(),
    //   unique: true,
    // },
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User", // Foreign Key reference to User
      required: true,
    },
    name: {
      type: String,
      required: true,
      trim: true,
    },
    email: {
      type: String,
      required: true,
      trim: true,
      lowercase: true,
    },
    phoneNo: {
      type: String,
      required: true,
    },
    subjectOfInquiry: {
      type: String,
      required: true,
    },
    message: {
      type: String,
      required: true,
    },
    status: {
      type: String,
      enum: ["open", "in progress", "resolved"], // Possible statuses
      default: "open",
    },
  },
  { timestamps: true }
);
export const Contact = mongoose.model("Contact", ContactSchema);



Order.find({ userId })
  .populate("userId")
  .populate("items.productId")
  .then((orders) => console.log(orders))
  .catch((err) => console.error(err));






