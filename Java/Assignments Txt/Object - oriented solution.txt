Object - oriented
1) What is Object oriented? Write down difference b/w Object oriented and procedure oriented programming approach.

Ans - Object-oriented is a style of Programming.
	The object in java refer to a real life object, so wordly it can be said that object-oriented concept is dealing with real life problems.
	Difference B/W object-oriented & procedure-oriented
	1. object-orientation follows bottom-up approach BUT procedure-oriented programming follow tp-down approach.
	2. Code reusability is possible in Object-orientedd programming (Java has Inheritance) BUT procedure-oriented programming doesn't have such concept.



2)What is class and object? Explain all oop features in java with example.

Ans -   Class : Class acts as a factory in java in which the complete code is written.
		Class is a user defined type, is a collection of similar types of objects and multiple object can be created in a class.
		Class can be defined as the blueprint of object.
	Object: Object is a real world entity, it has multiple behaviors and properties.
		Object always belongs to a class, it is a runtime entity.


	Features of Java :

	Inheritance : When the object of a class acquires the property of another class.
	Example - When a new model of any car is created it acquire already defined feature of older models.

	Encapsulation : Wrapping the data and function into the same unit.
	Example - When a car is created all the core behaviors and properties are binded together.

	Abstraction : Hiding the unnecessary information from the user and showing only essential things.
	Example - The background operations of behavior of the car like breaking, turning are kept hidden(Abstrat).

	polymorphism : One thing can hava different implementation. 
	Example - Once a car is produced it can be used as a Taxi, Household vehicle, etc.



3)What are the role of setter and getter method ? What is POJO In Java.

Ans -   Setter Method : The setter method is used to modify the value of any variable.

	Getter Method : The getter method is used to return the updated value. It can't be VOID.

	POJO class : The POJO refer to Plain Old Java Object class in java. The class which has variables, Setter & Getter Methods.




4)How to update and retrive  the value of a particular property of an object from anothor class(Let suppose the property is private) ?

Ans -   The Setter Methods are used to update the value of a perticular property.
	The Getter Methods are used to retrive the updated value of a perticular property.
	
	If the property is private the setter and getter method must written in the same class will help the object of the class to access the property.



5) Create an Object having two properties and four behaviours
(add,substract,multiply,divide) to perform desired operation.object must have setter and getter and keep all properties private.

Ans - 

class Oop {
    private double a;
    private double b;

    public double add(double a, double b) {
        this.a = a;
        this.b = b;
        double c = a + b;
        return c;
    }

    public double subtract(double a, double b) {
        this.a = a;
        this.b = b;
        double c = a - b;
        return c;
    }

    public double multiply(double a, double b) {
        this.a = a;
        this.b = b;
        double c = a * b;
        return c;
    }

    public double divide(double a, double b) {
        this.a = a;
        this.b = b;
        double c = a / b;
        return c;
    }

    // Setter
    public void setA(double a) {
        this.a = a;
    }

    public void setB(double b) {
        this.b = b;
    }

    // Getter
    public double getA(double a) {
        return a;
    }

    public double getB(double b) {
        return b;
    }

}

class TestMain {
    public static void main(String args[]) {
        Oop obj = new Oop();
        double x = obj.add(20, 3);
        double y = obj.subtract(20, 3);
        double z = obj.multiply(20, 3);
        double w = obj.divide(24, 3);
        System.out.println("Add = " + x + "\nSub = " + y + "\nMultiply = " + z + "\nDivide = " + w);
    }
}






6)What is Constructor? List down the keypoints about constructor.

Ans -   Constructor : It is used to initialize the object at the time of object creation.

	Keypoints :
	1.Constructors should not be private.(Genrally)
	2.Constructors do not have a return type not even void.
	3.Types: No-Argument Constructor, Parameterized Constructor and Default Constructor.
	4.If in a class no constructor is defined JVM will create a default constructor.




7)Can we make multiple contructor inside a class? if yes then what is the need of it.Explain.

Ans -   Yes, we can make multiple constructors inside a class.
	This is called constructor overloading.
	It is necessary to have different parameters(In terms of datatype, number or sequence), because
	if two constructors have similar parameters the JVM will be confused and generate an ambiguity error. 
	




8) Private constuctor is legal or illegal ?

Ans -   We can provide any access modifier to the constructor. If it is made private, then it can only be accessed inside the class.
	It is used to make singleton class.


9) What is Singleton class explain with suitable example?

Ans -   Singleton Class : The class in which only one object can be made.
	Example - Lock with only one key.(Class with only one object).




10)What is method overloading ? What are importance of method overloading ? Can we overload the main method in java ?

Ans -   Method Overloading : When more than one method is made with the same name then it is called method overloading.
	
	By overloading a method we can use a single method name for different uses. Like if we want to make a method to
	add integer then rather than making methods with different names for different number of integer we can make mathods
	by single name and with different parameters in terms of datatype, number or sequence.
	
	Yes, we can overload the main() method but the JVM will look for the Original main() method (i.e. public static vaid main(String args []))
	to invoke the overloaded method we need to call it in the Original main() method



11) How to pass as many argument to java method?

Ans - By Var-arg we can pass as many arguments to the java method of similar kind.
	
	Syntax :
		public void m1(int...n) , here 'int...n' is integer type var-arg



12) Can we overload the method with var-arg type of argument.

Ans - Yes, we can overload a method with var-arg, by passing parameter of different datatype before the var-arg.




13) Create a class to calculate Area of circle with one data member to store the radius and another to store area value. Create method members
init - to input radius from user
calc - to calculate area
display- to display area

Ans - 

import java.util.Scanner;

class AreaOfCircle{
	private double radius;
	private double area;
	
	public void init(double r){
	radius = r;
	}
	public void calc(){
	area = 22/7*radius*radius;
	}
	public void display(){
	System.out.println("Area of circle = "+area);
	}
}

class TestMain {
    public static void main(String args[]) {
        AreaOfCircle obj = new AreaOfCircle();
	Scanner sc = new Scanner(System.in);
	System.out.println("Enter Radius");
	double r = sc.nextDouble();
        obj.init(r);
        obj.calc();
        obj.display();
        
    }
}



14) Create a class MathOperation with two data member X and Y to store the operand and third data member R to store result of operation.Create method members
init - to input X and Y from user
add - to add X and Y and store in R
multiply - to multiply X and Y and store in R
power - to calculate X Y and store in R
display- to display Result R

Ans - 

class MathOperation{
	private int x;
	private int y;
	private int r;

	public void init(int a,int b){
	x = a;
	y = b;
	}
	public void add(){
	r = x+y;
	}
	public void multiply(){
	r = x*y;
	}
	public void power(){
	if(y==0)
	r = 1;

	else if(y < 0)
	System.out.println("Power can not be negative!");

	else{
	     r = 1;
	     for (int i = 1;i<=y;i++){
		r = r*x;
	     }
	 }
	}
	public void display(){
	System.out.println("Result is "+r);
	}
	
}

class TestMain {
    public static void main(String args[]) {
        MathOperation obj1 = new MathOperation();
	MathOperation obj2 = new MathOperation();
	MathOperation obj3 = new MathOperation();

        obj1.init(3,4);
	obj1.add();
	obj1.display();
	
	obj2.init(3,4);
	obj2.multiply();
	obj2.display();

        obj3.init(3,4);
	obj3.power();
	obj3.display();
        
    }
}





15) Create a class MathOperation containing method ‘multiply’ to calculate multiplication of following arguments.
two integers
three float
all elements of array
one double and one integer

Ans - 

class MathOperation{
	public void multiply(int a, int b){
	System.out.println("Multiplication of "+a+" & "+b+" = "+a*b);
	}

	public void multiply(float a,float b,float c){
	System.out.println("Multiplication of "+a+" & "+b+" & "+c+" = "+(float)a*b*c);
	}

	public void multiply(double arr[]){
	double r = 1;
		for(int i = 0;i<arr.length;i++){
		r = r*arr[i];
		}
	System.out.println("Multiplication of elements of array = "+r);
	}

	public void multiply(double a, int b){
	System.out.println("Multiplication of "+a+" & "+b+" = "+(double)a*b);
	}

}

class TestMain{
	public static void main(String args []){
	MathOperation obj1 = new MathOperation();
	int arr[] = {1,2,3,4,5};
	obj1.multiply(23,3);
	obj1.multiply(2.5f,3.2f,1.3f);
	obj1.multiply(arr[]);
	obj1.multiply((double)23,2);
	}
}





16) Create a class Person with properties (name and age) with following features.
Default age of person should be 18.
A person object can be initialized with name and age.
Method to display name and age of person.
Ans - 

class Person{
	private String name;
	private int age = 18;

	public Person(String s,int i){
	name = s;
	age = i;
	}

	public Person(String s){
	name = s;
	}

	public void display(){
	System.out.println("Name = "+name);
	System.out.println("Age of "+name+" is "+age+".");
	}

}

class TestMain{
	public static void main(String args []){

	Person obj1 = new Person("Yash",22);
	Person obj2 = new Person("Mahendra");

	obj1.display();
	obj2.display();
	
	}
}


17) Create a class Employee with(empNo ,salary and totalSalary)  with following features.
Only parameterized constructor;
totalSalary always represent total of all the salaries of all employees created.
empNo should be auto incremented.
display total employees and totalSalary using class method.

Ans - 

class Employee {
    private String name;
    private static int empNo = 0;
    private double salary;
    private static double totalSalary = 0;

    public Employee(String n, double s) {
        name = n;
        salary = s;
        empNo++;
        totalSalary = totalSalary + salary;
    }

    public static void totalEmp() {
        System.out.println("Total employee(s) = " + empNo);
    }

    public static void tSalary() {
        System.out.println("Total Salary = " + totalSalary + "Rs.\n");
    }

    public void display() {
        System.out.println("Employee Number = " + empNo);
        System.out.println("Employee Name = " + name);
        System.out.println("Employee Salary = " + salary + "Rs.\n");
    }
}

class TestMain6 {

    public static void main(String args[]) {
        Employee obj1 = new Employee("Yash", 10000.50);
        obj1.display();
        Employee obj2 = new Employee("Yash Mandlik", 5000);
        obj2.display();
        Employee obj3 = new Employee("Mahendra", 15000);
        obj3.display();

        Employee.totalEmp();
        Employee.tSalary();

    }
}


18) Create class Product (pid, price, quantity) with parameterized constructor.Create a main function in different class (say XYZ) and perform following task:
Accept five product information from user and store in an array
Find Pid of product with highest price.
Create method (with array of product’s object as argument) in XYZ class to calculate and return total amount spent on all products. (amount spent on single product=price of product * quantity of product).

Ans - 
import java.util.Scanner;

class Product {
	private int pid[] = new int[5];
	private double price[] = new double[5];
	private int quantity[] = new int[5];

	public Product(int x[] , double y[], int z[]){
	for(int i =0; i<x.length; i++){
	pid[i] = x[i];
	prince[i] = y[i];
	quantity[i] = z[i];
	}
}

    public double m1() {
        double sum = 0;
        for (int i = 0; i < quantity.length; i++) {
            sum = sum + (price[i] * quantity[i]);
        }
        return sum;
    }

}

class TestMain7 {

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int pidarr[] = new int[5];
        double pricearr[] = new double[5];
        int quantarr[] = new int[5];

        for (int i = 0; i < pidarr.length; i++) {
            System.out.println("\nEnter id of " + (i + 1) + " st/nd/rd/th product!");
            pidarr[i] = sc.nextInt();

            System.out.println("Enter price of " + (i + 1) + " st/nd/rd/th product!");
            pricearr[i] = sc.nextDouble();

            System.out.println("Enter quantity of " + (i + 1) + " st/nd/rd/th product!");
            quantarr[i] = sc.nextInt();
        }

        double max = pricearr[0];
        int maxId = pidarr[0];
        for (int j = 1; j < pidarr.length; j++) {
            if (max < pricearr[j]) {
                max = pricearr[j];
                maxId = pidarr[j];
            }
        }

        System.out.println("\nId of product with highest price is " + maxId);

        Product obj1 = new Product(pidarr, pricearr, quantarr);

        System.out.println("Total amount spent on all products " + obj1.m1());

    }
}






19) Make list of Students having name, roll no., age, score. Write a program to accept 10 students record and arrange the Students based on the score group [0-50], [50-65],[65-80],[80-100].

Ans - 

class Student{
	private String name;
	private int rollNo;
	private int age;
	private double score;
	

	public void arrange(){
	
	}
}





20)Create class Tile to store the edge length of a square tile , and create another class Floor to store length and width of a rectangular floor. Add method totalTiles(Tile t) in Floor class with Tile as argument to calculate the whole number of tiles needed to cover the floor completely.

Ans - 

class SqTile{
	private double length;
	
	public double tileArea(double l){
	length = l;
	return l*l;
	}

}


class RecFloor extends SqTile{
	private double l;
	private double w;

	public double floorArea(double l,double w){
	this.l = l;
	this.w = w;
	return l*w;
	}

	public double totalTiles(double	 a){
	return floorArea(l,w)/tileArea(a);
	}
}

class TestMain9{
	public static void main(String agr []){
	RecFloor obj1 = new RecFloor();
	obj1.floorArea(20,30);
	System.out.println(obj1.totalTiles(1));
	
	}

}
