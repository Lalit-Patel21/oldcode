Array Assignment :-

Q.1 Peak an element

An element is called a peak element if its value is not smaller than its adjacent elements' value (if they exist).
Given an array arr[] of size N, find the index of any one of its peak elements.
Note: The generated output will always be 1 if the index that you return is correct. Otherwise output will be 0.

Example 1:
Input:
N = 3
arr[] = {1,2,3}
Output: 1
Explanation: index 2 is 3.
It is the peak element as it is 
greater than its neighbour 2.
Example 2:
Input:
N = 2
arr[] = {3,4}
Output: 1
Explanation: 4 (at index 1) is the 
peak element as it is greater than 
its only neighbour element 3.
Constraints:
1 ≤ N ≤ 105
1 ≤ A[] ≤ 106

ackage arrayassignments1;

import java.util.Scanner;

public class P1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of Array: ");
        int size = sc.nextInt();

        int[] arr = new int[size];

        System.out.println("Enter the " + size + " elements in array:");

        for (int i = 0; i < arr.length; i++) {
            System.out.print("Enter the element for "+i+" index :");
            arr[i] = sc.nextInt();
        }

        System.out.print("Enter the index at which you want to check element is peak or not : ");
        int index = sc.nextInt();

        if ((index == 0 ) && (arr[index] >= arr[index] + 1))
                System.out.println("1");
        else if ((index == arr.length-1 ) && (arr[index] >= arr[index] - 1))
            System.out.println("1");
        else if ((arr[index] > arr[index - 1]) && arr[index] > arr[index + 1])
            System.out.println("1");
        else
            System.out.println("0");

    }
}

Q.2 Find minimum and maximum element in array.
package arrayassignments1;

import java.util.Scanner;

public class P2 {
    public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);

            System.out.print("Enter the size of Array: ");
            int size = sc.nextInt();

            int[] arr = new int[size];

            System.out.println("Enter the " + size + " elements in array:");

            for (int i = 0; i < arr.length; i++) {
                System.out.print("Enter the element for "+i+" index :");
                arr[i] = sc.nextInt();
            }
            int MIN=Integer.MAX_VALUE;
            int MAX=Integer.MIN_VALUE;

        System.out.print(size+" Element of array are : ");
        for (int i = 0; i < arr.length; i++)
            {
                System.out.print(arr[i]+" ");
                if (arr[i]<MIN)
                    MIN = arr[i];
                if (arr[i]>MAX)
                    MAX = arr[i];
            }
            System.out.println("\nMaximum value of array is :"+MAX);
            System.out.println("Minimum value of array is :"+MIN);
        }
}

Q.3 Write a program to reverse the array.
package arrayassignments1;

import java.util.Scanner;

public class P3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of Array: ");
        int size = sc.nextInt();

        int[] arr = new int[size];

        System.out.println("Enter the " + size + " elements in array:");

        for (int i = 0; i < arr.length; i++) {
            System.out.print("Enter the element for " + i + " index :");
            arr[i] = sc.nextInt();
        }

        System.out.print(size+" Element of array are : ");
        for (int i:arr)
            System.out.print(i+" ");

        System.out.println("\narray " + size + " element in reverse order is given Below :");
        for (int i = arr.length - 1; i >= 0; i--)
            System.out.print(arr[i] + " ");
    }
}

Q.4 Write a program to sort the array.
package arrayassignments1;

import java.util.Scanner;

public class P4 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of Array: ");
        int size = sc.nextInt();

        int[] arr = new int[size];

        System.out.println("Enter the " + size + " elements in array:");

        for (int i = 0; i < arr.length; i++) {
            System.out.print("Enter the element for " + i + " index :");
            arr[i] = sc.nextInt();
        }

        System.out.print(size+" Element of array are : ");
        for (int i:arr)
            System.out.print(i+" ");

      for (int i = 0; i < arr.length; i++)
      {
          for (int j=i+1;j<arr.length;j++)
          {
              if (arr[i]>arr[j])
              {
                  int temp;
                  temp=arr[i];
                  arr[i]=arr[j];
                  arr[j]=temp;
              }
          }
      }
      System.out.println("\n"+size+" Element of array after sorting in ascending order are : ");
      for (int i:arr)
          System.out.print(i+" ");



        for (int i = 0; i < arr.length; i++)
        {
            for (int j=i+1;j<arr.length;j++)
            {
                if (arr[i]<arr[j])
                {
                    int temp;
                    temp=arr[j];
                    arr[j]=arr[i];
                    arr[i]=temp;
                }
            }
        }
        System.out.println("\n"+size+" Element of array after sorting in descending order are : ");
        for (int i:arr)
            System.out.print(i+" ");
    }
}

Q.5 Find the kth largest and kth smallest element in array.
package arrayassignments1;

import java.util.Scanner;

public class P5 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of Array: ");
        int size = sc.nextInt();

        int[] arr = new int[size];
        System.out.println("Enter the " + size + " elements in array:");

        for (int i = 0; i < arr.length; i++) {
            System.out.print("Enter the element for " + i + " index :");
            arr[i] = sc.nextInt();
        }
        System.out.print(size+" Element of array are : ");
        for (int i:arr)
            System.out.print(i+" ");

        System.out.print("\nenter the value of k for the kth largest and kth smallest element in array : ");
        int k = sc.nextInt();

        for (int i = 0; i < arr.length; i++)
        {
            for (int j=i+1;j<arr.length;j++)
            {
                if (arr[i]>arr[j])
                {
                    int temp;
                    temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                }
            }
        }
        System.out.println("\n"+size+" Element of array after sorting in ascending order are : ");
        for (int i:arr)
            System.out.print(i+" ");

//        for (int i = 0; i < arr.length; i++)
//        {
//            for (int j=i+1;j<arr.length;j++)
//            {
//                if (arr[i]<arr[j])
//                {
//                    int temp;
//                    temp=arr[j];
//                    arr[j]=arr[i];
//                    arr[i]=temp;
//                }
//            }
//        }
//        System.out.println("\n"+size+" Element of array after sorting in descending order are : ");
//        for (int i:arr)
//            System.out.print(i+" ");

        System.out.println("\nthe "+k+" th largest element in the given array is : "+arr[arr.length-k]);
        System.out.println("\nthe "+k+" th smallest element in the given array is : "+arr[k-1]);

    }

}

Q.5 Find occurance of an integer number in array.
ackage arrayassignments1;

import java.util.Scanner;

public class P6 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of Array: ");
        int size = sc.nextInt();

        int[] arr = new int[size];
        System.out.println("Enter the " + size + " elements in array:");

        for (int i = 0; i < arr.length; i++) {
            System.out.print("Enter the element for " + i + " index :");
            arr[i] = sc.nextInt();
        }
        System.out.print(size+" Element of array are : ");
        for (int i:arr)
            System.out.print(i+" ");

        System.out.print("\nEnter the element to check the occurrence of an given integer number in array : ");
        int n= sc.nextInt();

        int count=0;

        for (int i = 0; i < arr.length; i++)
        {
                if (arr[i]==n)
                {
                    count++;
                }
        }
        System.out.println("\nThe "+n+" element occurrence at "+count+" times in the above array" );

    }
}

Q.6 Sort the array of 0s , 1s and 2s.
package arrayassignments1;

public class P7 {
    public static void main(String[] args) {

//      int []arr = new int[]{0,1,0,2,0,1,1,2,2,0,0};
//        int zeroCount=0,oneCount=0,twoCount=0;
//        for (int i=0;i< arr.length;i++)
//        {
//                if (arr[i]==0)
//                {
//                    zeroCount++;
//
//                } else if (arr[i]==1)
//                {
//                    oneCount++;
//                }
//                else
//                {
//                    twoCount++;
//                }
//            }
//
//        for (int j=0;j<arr.length;j++)
//        {
//            if (zeroCount!=0)
//            {
//                arr[j]=0;
//                zeroCount--;
//
//            } else if (oneCount!=0)
//            {
//                arr[j]=1;
//                oneCount--;
//
//            }
//            else
//            {
//                arr[j]=2;
//                twoCount--;
//
//            }
//        }
//        for (int i:arr)
//        {
//            System.out.print(i+" ");
//        }



//        int []arr = new int[]{0,1,0,1,0,1,1,0,1,0,0};
//
//        for (int i=0;i< arr.length;i++)
//        {
//            for (int j=i+1;j<arr.length;j++)
//            {
//                if (arr[i] == 1)
//                {
//                    if(arr[j]==0)
//                    {
//                        arr[i]=0;
//                        arr[j]=1;
//                    }
//                }
//
//            }
//        }
//        for (int i:arr)
//        {
//            System.out.print(i+" ");
//        }



        int []arr = new int[]{0,1,0,2,0,1,1,2,2,0,0};
//        int k = arr.length-1;
        for (int i=0;i< arr.length;i++)
        {
            for (int j=i+1;i<arr.length;i++)
            {
                if (arr[i] == 1)
                {
                    if (arr[j]==0)
                    {
                     arr[i]=0;
                     arr[j]=1;
                    }
//                    else
//                        arr[]
                }
                if(arr[i]==2)
                {
                    if (arr[j]==0){
//                        arr[k--]=2;
                        arr[i]=0;
                    }

                }
                if(arr[i]==2)
                {
                    if (arr[j]==1){
//                        arr[k--]=2;
                        arr[i]=1;
                        arr[j]=2;
                    }

                }

            }
        }
        for (int i:arr)
        {
            System.out.print(i+" ");
        }
    }
}

Q.7 Sub array with given sum
Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S.

Example 1:
Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.

Example 2:
Input:
N = 10, S = 15
A[] = {1,2,3,4,5,6,7,8,9,10}
Output: 1 5
Explanation: The sum of elements 
from 1st position to 5th position
is 15.
1 <= N <= 105
1 <= Ai <= 109

package arrayassignments1;

public class P8 {
    public static void main(String[] args) {

        int [] arr = new int[]{1,2,3,4,5};
        int n = 12,sum=0,j=0,i=0;
        boolean flag=false;
        first:
        for (i=0;i<arr.length;i++)
        {
            sum=arr[i];
            for (j=i+1;j<arr.length;j++)
            {
                sum=sum+arr[j];
                if(n==sum)
                {
//                    System.out.println((i+1)+" "+(j+1));
                    flag=true;
                    break first;
                }

            }
        }
        if (flag)
            System.out.println("sub array whose sum is :"+n+ " and sub array from "+(i+1)+" to "+(j+1));
        else
          System.out.println("no found a sub array whose sum is :"+n);
    }
}

Q.8
Given an unsorted array arr[] of size N having both negative and positive integers. The task is place all negative element at the end of array without changing the order of positive element and negative element.

Example 1:
Input : 
N = 8
arr[] = {1, -1, 3, 2, -7, -5, 11, 6 }
Output : 
1  3  2  11  6  -1  -7  -5

Example 2:
Input : 
N=8
arr[] = {-5, 7, -3, -4, 9, 10, -1, 11}
Output :
7  9  10  11  -5  -3  -4  -1

package arrayassignments1;

public class P9 {
    public static void main(String[] args)
    {
    int [] arr = new int[]{1, -1, 3, 2, -7, -5, 11, 6};

    for (int i=0;i<arr.length;i++)
    {
        if(arr[i]>0)
        {
            System.out.printf(arr[i]+" ");
        }
    }
        for (int i=0;i<arr.length;i++)
        {
            if(arr[i]<0)
            {
                System.out.printf(arr[i]+" ");
            }
        }





//        int temp;
//        for (int i=0;i< arr.length;i++)
//        {
//            for (int j=i+1;j<arr.length;j++)
//            {
//                if (arr[i]<0&&arr[j]>0)
//                {
//                        temp=arr[i];
//                        arr[i]=arr[j];
//                        arr[j]=temp;
//                }
//
//            }
//        }
//        for (int i:arr)
//        {
//            System.out.print(i+" ");
//        }
    }
}


Q.9 Find the Union and Intersaction of two sorted array.
Given two arrays a[] and b[] of size n and m respectively. The task is to find union between these two arrays. 
Union of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.
Example 1:
Input:
5 3
1 2 3 4 5
1 2 3
Output: 
5
Explanation: 
1, 2, 3, 4 and 5 are the
elements which comes in the union set
of both arrays. So count is 5.
Example 2:
Input:
6 2 
85 25 1 32 54 6
85 2 
Output: 
7
Explanation: 
85, 25, 1, 32, 54, 6, and
2 are the elements which comes in the
union set of both arrays. So count is 7.

Q.10. Write a program to cyclically rotate array by one.

Q.11 Count pair with given sum.
Given an array of N integers, and an integer K, find the number of pairs of elements in the array whose sum is equal to K.

Example 1:
Input:
N = 4, K = 6
arr[] = {1,5,7,1}
Output: 2
Explanation: 
arr[0] + arr[1] = 1 + 5 = 6 
and arr[1] + arr[3] = 5 + 1 = 6.

Example 2:
Input:
N = 4, X = 2
arr[] = {1, 1, 1, 1}
Output: 6
Explanation:
Each 1 will produce sum 2 with any 1.
 

Q.12 Find common elements in three sorted arrays.
Given three arrays sorted in increasing order. Find the elements that are common in all three arrays.
Note: can you take care of the duplicates without using any additional Data Structure?
Example 1:
Input:
n1 = 6; A = {1, 5, 10, 20, 40, 80}
n2 = 5; B = {6, 7, 20, 80, 100}
n3 = 8; C = {3, 4, 15, 20, 30, 70, 80, 120}
Output: 20 80
Explanation: 20 and 80 are the only
common elements in A, B and C.


Q.13 Find the first repeating element in array of integers


Q.14. Find the first non-repeating elment in given array of integers
Find the first non-repeating element in a given array arr of N integers.
Note: Array consists of only positive and negative integers and not zero.
Example 1:
Input : arr[] = {-1, 2, -1, 3, 2}
Output : 3
Explanation:
-1 and 2 are repeating whereas 3 is 
the only number occuring once.
Hence, the output is 3.

Example 2:
Input : arr[] = {1, 1, 1}
Output : 0
 

Q.15
Sub with equal 0s and 1s
Given an array containing 0s and 1s. Find the number of subarrays having equal number of 0s and 1s. 
Example 1:
Input:
n = 7
A[] = {1,0,0,1,0,1,1}
Output: 8
Explanation: The index range for the 8 
sub-arrays are: (0, 1), (2, 3), (0, 3), (3, 4), 
(4, 5) ,(2, 5), (0, 5), (1, 6)
Example 2:
Input:
n = 5
A[] = {1,1,1,1,0}
Output: 1
Explanation: The index range for the 
subarray is (3,4).


Q.16
Rearrange the array in alternating positive and negative items
Given an unsorted array Arr of N positive and negative numbers. Your task is to create an array of alternate positive and negative numbers without changing the relative order of positive and negative numbers.
Note: Array should start with positive number.

Example 1:
Input: 
N = 9
Arr[] = {9, 4, -2, -1, 5, 0, -5, -3, 2}
Output:
9 -2 4 -1 5 -5 0 -3 2
Example 2:
Input: 
N = 10
Arr[] = {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}
Output:
5 -5 2 -2 4 -8 7 1 8 0 

Q.17 Find it there is any subarray with sum equals to zero
Given an array of positive and negative numbers. Find if there is a subarray (of size at-least one) with 0 sum.
Example 1:
Input:
5
4 2 -3 1 6

Output: 
Yes

Explanation: 
2, -3, 1 is the subarray 
with sum 0.
Example 2:
Input:
5
4 2 0 1 6

Output: 
Yes

Explanation: 
0 is one of the element 
in the array so there exist a 
subarray with sum 0.


Q.18) Find largest sum contigeous sub array
Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.

Example 1:
Input:
N = 5
Arr[] = {1,2,3,-2,5}
Output:
9
Explanation:
Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which 
is a contiguous subarray.
Example 2:
Input:
N = 4
Arr[] = {-1,-2,-3,-4}
Output:
-1
Explanation:
Max subarray sum is -1 
of element (-1)


Q.19) Find Maximum product contigeous sub array 

Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.
Example 1:
Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is [6, -3, -10] which gives product as 180.
Example 2:
Input:
N = 6
Arr[] = {2, 3, 4, 5, -1, 0}
Output: 120
Explanation: Subarray with maximum product
is [2, 3, 4, 5] which gives product as 120.


Q.20 Longest consecutive sequence.
Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.
 
Example 1:
Input:
N = 7
a[] = {2,6,1,9,4,5,3}
Output:
6
Explanation:
The consecutive numbers here
are 1, 2, 3, 4, 5, 6. These 6 
numbers form the longest consecutive
subsquence.
Example 2:
Input:
N = 7
a[] = {1,9,3,10,4,20,2}
Output:
4
Explanation:
1, 2, 3, 4 is the longest
consecutive subsequence.


Q.21 Max Sum in configuration
Given an array(0-based indexing), you have to find the max sum of i*A[i] where A[i] is the element at index i in the array.The only operation allowed is to rotate(clock-wise or counter clock-wise) the array any number of times.
Example 1:
Input:
N = 4
A[] = {8,3,1,2}
Output: 29
Explanation: Above the configuration
possible by rotating elements are
3 1 2 8 here sum is 3*0+1*1+2*2+8*3 = 29
1 2 8 3 here sum is 1*0+2*1+8*2+3*3 = 27
2 8 3 1 here sum is 2*0+8*1+3*2+1*3 = 17
8 3 1 2 here sum is 8*0+3*1+1*2+2*3 = 11
Here the max sum is 29

public class MaxSum{
public static void main(String []args){

int []arr = new int[]{8,3,1,2};

int N=4,multi,Maxsum=Integer.MIN_VALUE;

for(int i=0; i<N;i++)
{
   multi=0;
   for(int j=0;j<arr.length;j++)
  {
   multi=multi+arr[j-i]*j;
   if(multi>maxSum)
     maxSum=multi;
  }  
}
System.out.println("");
System.out.println("");

}
}





Q.22) C program to find nearest lesser and greater element in array
Given an array of N elements and we have to find nearest lesser and nearest greater element using java program.
Example:
    Input:
    Enter the number of elements for the arrray : 3  
 
    Enter the elements for array_1.. 
    array_1[0] : 1   
    array_1[1] : 2   
    array_1[2] : 3   
 
    Enter the number : 2 
 
    Output:
    Element lesser than 2 is : 1 
    Element greater than 2 is : 3


public class NearestLesserAndGreater{
public static void main(String []args){

int []arr = new int[]{6,4,3,7,8,1,9};

int val=7,nGreater=Integer.MAX_VALUE,nLesser=Integer.MIN_VALUE;

for(int ele : arr){

  if(val<=ele)
  {
    if(nGreater>ele)
      nGreater=ele;
    
  }
  if(val>=ele)
  {
    if(nLesser<ele)
      nLesser=ele;
  }

}
System.out.println("element Lesser than "+val+" is :"+nLesser);
System.out.println("element Greater than "+val+" is :"+nGreater);

}
}


23. Write a Java program to find the sum and average of one dimensional integer array. 

public class SumAndAverage{
public static void main(String [] args){

int []arr = new int[]{6,3,8,9,2};
double sum = 0;
for(int ele : arr){
sum= sum+ele;
}
double avg = (sum/arr.length);
System.out.println("Sum of one dimensional array :"+sum);
System.out.println("Average of one dimensional array :"+avg);
}
}
24. Write a Java program to swap first and last element of an integer 1-d array.

public class Swap{
public static void main(String []args){

int []arr=new int[]{4,6,8,0,2,8,7};

System.out.println("before the swaping first and last element of an integer 1-d array");
for(int ele : arr){
System.out.print(ele+" ");
}
int temp;
temp=arr[0];
arr[0]=arr[arr.length-1];
arr[arr.length-1]=temp;

System.out.println("after the swaping first and last element of an integer 1-D array :");
for(int ele : arr){
System.out.print(ele+" ");
}
}
}

25. Write a Java program to reverse the element of an integer 1-D array.

public class ReverseOfArray{
public static void main(String []args){

int []arr = new int[]{4,3,7,8,1,8};
int []brr = new int[arr.length];

System.out.println("before the reversing the element of an integer 1-D array :");

for(int ele : arr){
System.out.print(ele+",");
}
System.out.println();

for(int i = 0; i < arr.length; i++){
brr[i] = arr[arr.length-1-i];
}

System.out.println("After the reversing the element of an integer 1-D array :");

for(int ele : brr){
System.out.print(ele+",");
}
}
}
 
26. Write a Java program to find the largest and smallest element of an array.

public class LargestAndSmallest{
public static void main(String []args){

int []arr = new int[]{4,3,7,8,1,8};

int Max=Integer.MIN_VALUE;
int Min=Integer.MAX_VALUE;

for(int ele : arr){

  if(Max<ele)
   Max=ele;
  if(Min>ele)
   Min=ele;

}
System.out.println("Largest element of array :"+Max);
System.out.println("Smallest element of array :"+Min);

}
}


27. 
28. P is one-dimensional array of integers. Write a Java program search for a data VAL from P. If VAL is present in the array then “element found ” otherwise “element not found” should be displayed. 

public class FindVal{
public static void main(String []args){

int []arr = new int[]{4,3,7,8,1,8};

int val=8,i;
for(i=0;i<arr.length;i++)
{
  if(arr[i]==val)
  {
    System.out.println("Element Found");
    break;
  }
}
if(i==arr.length)
{
   System.out.println("Element Not Found");
}
}
}



29. Suppose a one-dimensional array AR containing integers is arranged in ascending order. Write a java program to search for an integer from AR with the help of Binary search method, 

public class BinarySearch{
public static void main(String []args){

int []arr = new int[]{2,4,7,8,9,10,16};

int val=8;

boolean flag = binarySearchMethod(arr,val);

if(flag==true)
  {
    System.out.println("Element Found");
  }
else{
   System.out.println("Element not Found");
   }


public static boolean binarySearchMethod(int []arr,int val)
{
   int start=0,end=arr.length-1,mid=0;
     
   while(start<=end)
   {
     mid = (start+end)/2;
     if(arr[mid]==val)
     {
        return true;
     }
     else if(arr[mid]>value)
     {
       end = --mid; 
     } 
     else
     {
       start = ++mid;
     }  
   }
   return false;

}
}
}




30. Suppose A, B, C are arrays of integers of size M, N, and M + N respectively. The numbers in array A appear in ascending order while the numbers in array B appear in descending order. Write a java progtam to produce third array C by merging arrays A and B in ascending order.


public class MergingTwoArray{
public static void main(String []args){

int []A = new int[]{2,4,7,8,9,10,16};
int []B = new int[]{27,25,21,19,17,15,14};
int []C = new int[A.length+B.length];

for(int i = 0 ; i<A.length; i++)
{
   C[i]=A[i];
   C[A.length+i]=B[i];
}
for(int ele : C)
{
 System.out.print(ele +" ");
}
System.out.println();


int temp;
for(int i=1;i<C.length-1;i++)
{
  for(int j=i+1;j<C.length;j++)
  {
  if(C[i]>C[j])
  {
    temp=C[i];
    C[i]=C[j];
    C[j]=temp;
  }
 }
}

for(int ele : C)
{
 System.out.print(ele +" ");
}

}
}


31. Suppose X. Y, Z are arrays of integers of size M, N, and M + N respectively. The numbers in array X and Y appear in descending order. Write a java program to produce third array Z by merging arrays X and Y in descending order. 

public class MergingTwoArrayInAscending{
public static void main(String []args){

int []A = new int[]{34,23,18,13,11,10,9};
int []B = new int[]{27,25,21,19,17,15,14};
int []C = new int[A.length+B.length];

for(int i = 0 ; i<A.length; i++)
{
   C[i]=A[i];
   C[A.length+i]=B[i];
}
for(int ele : C)
{
 System.out.print(ele +" ");
}
System.out.println();


int temp;
for(int i=0;i<C.length-1;i++)
{
  for(int j=i+1;j<C.length;j++)
  {
  if(C[i]<C[j])
  {
    temp=C[i];
    C[i]=C[j];
    C[j]=temp;
  }
 }
}

for(int ele : C)
{
 System.out.print(ele +" ");
}

}
}
32. Given two arrays of integers A and B of sizes M and N respectively. Write a Write a c program, which will produce a third array named C. such that the following sequence is followed. 
All even numbers of A from left to right are copied into C from left to right. 
All odd numbers of A from left to right are copied into C from right to left. 
All even numbers of B from left to right are copied into C from left to right. 
All old numbers of B from left to right are copied into C from right to left.
e.g., A is {3, 2, 1, 7, 6, 3} and B is {9, 3, 5, 6, 2, 8, 10} the resultant array C is {2, 6, 6, 2, 8, 10, 5, 3, 9, 3, 7, 1, 3} 

public class MergingTwoArrayInAscending{
public static void main(String []args){

int []A = new int[]{3, 2, 1, 7, 6, 3};
int []B = new int[]{9, 3, 5, 6, 2, 8, 10};
int []C = new int[A.length+B.length];

for(int i = 0 ; i<A.length; i++)
{
   C[i]=A[i];
   C[A.length+i]=B[i];
}
for(int ele : C)
{
 System.out.print(ele +" ");
}
System.out.println();


int temp;
for(int i=0;i<C.length-1;i++)
{
  for(int j=i+1;j<C.length;j++)
  {
  if(C[i]<C[j])
  {
    temp=C[i];
    C[i]=C[j];
    C[j]=temp;
  }
 }
}

for(int ele : C)
{
 System.out.print(ele +" ");
}

}
}

33. Write a java program to impelment binary search algorithm

public class BinarySearchAlgo{
public static void main(String []args){

int []arr = new int[]{2,4,7,8,9,10,16};

int val=10;

boolean flag = binarySearchMethod(arr,val);

if(flag==true)
  {
    System.out.println("Element Found");
  }
else{
   System.out.println("Element not Found");
   }

}
public static boolean binarySearchMethod(int []arr,int val)
{
   int start=0,end=arr.length-1,mid=0;
     
   while(start<=end)
   {
     mid = (start+end)/2;
     if(arr[mid]==val)
     {
        return true;
     }
     else if(arr[mid]>val)
     {
       end = --mid; 
     } 
     else
     {
       start = ++mid;
     }  

   }
  return false;

}
}

34. Write a java program to implement linear search

public class LinearSearchAlgo{
public static void main(String []args){

int []arr = new int[]{2,4,7,8,9,10,16};

int val=18;

boolean flag = linearSearchMethod(arr,val);

if(flag==true)
  {
    System.out.println("Element Found");
  }
else{
   System.out.println("Element not Found");
   }

}
public static boolean linearSearchMethod(int []arr,int val)
{     
   int i = 0;
   while(i<arr.length)
   {
     if(arr[i]==val)
     {
       return true;
     }
     i++;
   }
  return false;

}
}

35. Write a java program to implement selection sort algoritm
public class SelectionSort
{
 public static void main(String [] args)
 {
   int []A = new int[]{9, 3, 5, 6, 2, 8, 10};

   for(int ele : A)
   {
     System.out.print(ele +" ");
   }
   System.out.println();

   int temp,min;
   for(int i=0;i<A.length-1;i++)
   {
     min=i;
    for(int j=i+1;j<A.length;j++)
    { 
      if(A[j]<A[min])
        min=j;
    }
    if(min!=i)
    {
      temp=A[i];
      A[i]=A[min];
      A[min]=temp;
    }
  }
   for(int ele : A)
   {
     System.out.print(ele +" ");
   }
  }
}





36. Write a java program to implement bubble sort algorithm

public class BubbleSort
{
public static void main(String [] args)
 {
   int []A = new int[]{9, 3, 5, 6, 2, 8, 10};

   for(int ele : A)
   {
     System.out.print(ele +" ");
   }

   System.out.println();

  int temp;
  boolean isSwapped=false;

  for(int i=0;i<A.length-1;i++)
  {
   for(int j=0;j<A.length-i-1;j++)
   {
    if(A[j]>A[j+1])
    {
      temp=A[j];
      A[j]=A[j+1];
      A[j+1]=temp;
      isSwapped=true;
    }
  }
  if(!isSwapped)
      break;
  }
  for(int ele : A)
  {
    System.out.print(ele +" ");
  }
 }
}

37. Write a java progrtam to implement insertion sort algorithm 

public class InsertionSort{
public static void main(String [] args)
{
int []A = new int[]{9, 3, 5, 6, 2, 8, 10};

for(int ele : A)
{
 System.out.print(ele +" ");
}
System.out.println();

int temp;

for(int i=0;i<A.length-1;i++)
{
  for(int j=i+1;j>0;j--)
  {
  if(A[j]>A[j-1])
  {
    temp=A[j];
    A[j]=A[j-1];
    A[j-1]=temp;
   }
  else
   break;
 }
}

for(int ele : A)
{
 System.out.print(ele +" ");
}
}
}

output : 9 3 5 6 2 8 10
         10 9 8 6 5 3 2





Medam Assignment

1.) Wap to define an array of integer of size 6. take input from user and display it 
    in reverse order.





2.) Wap to ask 5 names from user and check if particular name exists in array or not.
3.) Wap to define an array of integer and assign value in program and print sum of     all values. 
4.) Wap to print max and minimum value in given array.
5.) Wap to find and print even numbers in given array.
6.) Wap to find and print prime numbers in given array.
7.) wap to search a particular number in given array and print its position.
8.) Wap to find the sum and product of all elements of an array.
9.) Initialize and print all elements of 2D array.
10.)  


Sca Assignment
Assignment of Array in Java

1. Take 10 integer inputs from the user and store them in an array. Again ask the user to give a number. Now, tell the user whether that number is present in the array or not.

2. Take 20 integer inputs from the user and print the following: number of positive numbers, number of negative numbers, number of odd numbers, number of even numbers and number of 0s.

3. Take 10 integer inputs from the user and store them in an array. Now, copy all the elements in another array but in reverse order.

4. Write a program to find the sum and product of all elements of an array.

5. Find largest and smallest elements of an array.

 6. Write a program to check if elements of an array are same or not it read from front or back. 


7. Consider an integer array, the number of elements in which is determined by the user. The elements are also taken as input from the user. Write a program to find those pairs of elements that have the maximum and minimum difference among all element pairs.

8. If the input array is [10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60], your program should be able to find that the sub array lies between the indexes 3 and 8. 

9. Take an array of length n where all the numbers are nonnegative and unique. Find the element in the array possessing the highest value. Split the element into two parts where the first part contains the next highest value in the array and the second part holds the required additive entity to get the highest value. Print the array where the highest value gets spitted into those two parts. 
Sample input: 4 8 6 3 2 
Sample output: 4 6 2 6 3 2

10. Write a program to shift every element of an array to circularly right. 

E.g.- INPUT : 1 2 3 4 5 
OUTPUT : 5 1 2 3 4




11. Initialize a 2D array of 3*3 matrix. 
E.g.- 	1 	2 	3 
	4 	5 	6 
	7	 8	 9 
Check if the matrix is symmetric or not.


12. Input any number. Find the sum of the digits of the number using a recursive function.

