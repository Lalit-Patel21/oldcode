1) What is Inheritance ? Is Java Support the multiple inheritance ? If no then why.

Ans - When something new is created by using existing things, without changing the existing thing is called Inheritance.
							
When the object of the one class acquires the properties and methods or features of another class then it is known as Inheritance.

# It is done by the 'extends' keyword. It's main purpose is code reusability.

# Java does not support the multiple inheritance.

Because if any class inheritance more than one class and those classes may have methods with same names then JVM would be confused which method to be invoked and will give an ambiguity error. To avoid this, java doesn't support the multiple inheritance.


2)What is method overriding ? List down the difference between method overloading and method overriding.

Ans -   While performing inheritence if the implimentation of method defined in the parent class is changed then it will be called Method Overriding.
	It is done to fulfill own requirement of the java programmer.
	In  method overriding the parameters of the methods must be same. Return type can be changed while overriding but only when the return type is
	  non-primitive(Co-varient).
	ex-
	   class A{
		public A m1{
		return newA(); // here return type of m1 is A which can be called as an object corresponding to class A(which is non-primitive).
		}
	   }

	   class B extends A{
		public B m1{ 
		return newB();  // so the return type can be changed because it is co-varient.
		}
	   }



	# Difference Between method overloading and method overriding:
	1. Parameter should be different in method overloading.
	   Parameter must be different in method overriding.

	2. Return type doesn't matter in method overloading.
	   Return type must be same in case of primitive return type & can only be changed when it is co-varient.

	3. Method overloading is a Compile-Time polymorphism.
	   Method overriding is a Run-Time polymorphism.

	4. Overloading can be done in the same class.
	   Overriding can only be done in the child class (Inheritence is required).
	




3) What is the role of return type in case of method overloading and method overriding?

Ans -   In method over loading return type do not matter at all, you can change th ereturn type as your requirement.
	In method overriding return type must be same in case of primitive return type & can only be changed when it is co-varient(non-primitive).



4) Can we Override static, private method?

Ans -   # Private methods are accessible in the class only. So we can not access them in the child class. So, we can not be Override private methods.
	
	# Static methods are inherited in the child class and appear to be overrided but it is not.
	  There is a statement that "Static methods are HIDDEN but not OVERRIDDEN".

    Ex - 
	class A{
		public static void m1(){
		System.out.println("A-m1");
		}
	}
	class B extends A{
		public static void m1(){
		System.out.println("B-m1");
		}
	}

	class TestMain{
		public static void main(String args[]){
		A obj = new B(); // Jiska reference uski method.
		obj.m1();   // Output will be A-m1.(It shows m1() is not overriden.)
		}
	}




5) Create class OneBHK with instance variable roomArea , hallArea and price.
Create default and parameterized constructor.
Method show(): to print OneBHK data member information.

Ans -   

	class OneBHK{
		private double roomArea;
		private double hallArea;
		private double price;

		public OneBHK(){
			System.out.println("Default Constructor called!!");
		}

		public OneBHK(double r,double h,double p){
			System.out.println("Parameterized Constructor called!!");
			roomArea = r;
			hallArea = h;
			price  = p;
		}

		public void show(){
			System.out.println("Area of room is "+roomArea);
			System.out.println("Area of hall is "+hallArea);
			System.out.println("price is "+price);
		}

		public void show(double r,double h,double p){
			roomArea = r;
			hallArea = h;
			price  = p;
		
			System.out.println("Area of room is "+roomArea);
			System.out.println("Area of hall is "+hallArea);
			System.out.println("price is "+price);
		}
	}

	class TestMain5{
		public static void main(String args[]){
			OneBHK obj1 = new OneBHK(30.1,55.2,2000);
			obj1.show();

			OneBHK obj2 = new OneBHK();
			obj2.show(30.1,55.2,2000);
		}
	}



6) Create another class TwoBHK which has all the properties and behaviour of OneBHK and a new instance variable room2Area.
Create default and parameterized constructor.
Method show(): to print all data member information.
Write main function in another class(Say XYZ) and store three TwoBHK flatâ€™s.information and print information using show method. Also print total amount of all flats.

Ans -   
class OneBHK {
    private double roomArea;
    private double hallArea;
    private double price;

    public OneBHK() {
        System.out.println("\nDefault Constructor called!!");
    }

    public OneBHK(double r, double h, double p) {
        System.out.println("\nParameterized Constructor called!!");
        roomArea = r;
        hallArea = h;
        price = p;
    }

    public void show() {
        System.out.println("Area of room is " + roomArea + ".");
        System.out.println("Area of hall is " + hallArea + ".");
        System.out.println("price is " + price + "Rs.");
    }

    public void show(double r, double h, double p) {
        roomArea = r;
        hallArea = h;
        price = p;

        System.out.println("Area of room is " + roomArea + ".");
        System.out.println("Area of hall is " + hallArea + ".");
        System.out.println("price is " + price + "Rs.");
    }
}

class TwoBHK extends OneBHK {
    private double room2Area;
    private static double totalAmount = 0;

    public TwoBHK() {

    }

    public TwoBHK(double r, double h, double p) {
        super(r, h, p);

    }

    public void show(double r2) {
        show();
        room2Area = r2;
        System.out.println("Area of second room is " + room2Area + ".\n");
    }

    public void show(double r, double r2, double h, double p) {
        room2Area = r2;
        totalAmount = totalAmount + p;
        show(r, h, p);
        System.out.println("Area of second room is " + room2Area + ".\n");
    }

    public static void tAmount() {
        System.out.println("Total amount is " + totalAmount);
    }
}

class TestMain6 {
    public static void main(String args[]) {

        TwoBHK obj2 = new TwoBHK();
        obj2.show(20.1, 22.2, 55.2, 3000.0);

        TwoBHK obj1 = new TwoBHK(30.1, 55.2, 6000.0);
        obj1.show(31.3);

        TwoBHK obj3 = new TwoBHK();
        obj3.show(35.1, 23.0, 55.2, 4500.0);

        TwoBHK.tAmount();

    }
}




7) Create three classes  Faculty  (facultyid, salary), FullTimeFaculty  (basic salary, allowance) inherits class Faculty, PartTimeFaculty  (hour, rate) inherits class Faculty. 
 Create   a   method   for   accepting   input   in   FullTimeFaculty       and  PartTimeFaculty,  but   salary  should   not   be   accepted.    salary   is  calculated   on   the   basis   of   (basic+allowance)   for   FullTimeFaculty   and  (hour*rate)   for   PartTimeFaculty.   Also   create   method   in   above   classes   to  display faculty data. 
 Create   another   class(say   XYZ)   for   main   method   and   store   2 fulltime and 2 parttime faculty information. Also print their details. 

Ans -   
import java.util.Scanner;

class Faculty {
    private int facultyId;
    private double salary;

    public Faculty() {
        System.out.println("\n");
    }

    public void inputId() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter Faculty Id");
        int id = sc.nextInt();
        facultyId = id;
    }

    public void displayId() {
        System.out.println("\nFaculty Id - " + facultyId);
    }

    public void setSalary(double s) {
        salary = s;
    }

    public void displaySalary() {
        System.out.println("Faculty's Salary - " + salary + "\n");

    }

}

class FullTimeFaculty extends Faculty {
    private double basicSalary;
    private double allowance;

    public FullTimeFaculty() {

    }

    public void input() {
        Scanner sc = new Scanner(System.in);

        inputId();

        System.out.println("Enter Fulltime-Faculty's Basic Salary");
        int s = sc.nextInt();
        basicSalary = s;

        System.out.println("Enter Fulltime-Faculty's Allowance");
        int a = sc.nextInt();
        allowance = a;
    }

    public void calculateSalary() {
        double s = basicSalary + allowance;
        setSalary(s);
    }

    public void facultyDetails() {

        displayId();
        System.out.println("Basic Salary - " + basicSalary);
        System.out.println("Allowance - " + allowance);
        calculateSalary();
        displaySalary();
    }

}

class PartTimeFaculty extends Faculty {
    private double hour;
    private double rate;

    public PartTimeFaculty() {

    }

    public void input() {
        Scanner sc = new Scanner(System.in);

        inputId();

        System.out.println("Enter Part-time Faculty's Hour of work.");
        int h = sc.nextInt();
        hour = h;

        System.out.println("Enter Part-time Faculty's Rate per Hour.");
        int r = sc.nextInt();
        rate = r;
    }

    public void calculateSalary() {
        double s = hour * rate;
        setSalary(s);
    }

    public void facultyDetails() {

        displayId();
        System.out.println("Part-time Faculty's Hour of work - " + hour);
        System.out.println("Rate per Hour - " + rate);
        calculateSalary();
        displaySalary();
    }

}

class TestMain7 {
    public static void main(String args[]) {
        // Full-time
        FullTimeFaculty obj1 = new FullTimeFaculty();
        obj1.input();
        FullTimeFaculty obj2 = new FullTimeFaculty();
        obj2.input();

        // Part-time
        PartTimeFaculty obj3 = new PartTimeFaculty();
        obj3.input();
        PartTimeFaculty obj4 = new PartTimeFaculty();
        obj4.input();

        obj1.facultyDetails();
        obj2.facultyDetails();
        obj3.facultyDetails();
        obj4.facultyDetails();
    }
}




8) Create a class Student with two members : rollno and percentage.
	Create default and parameterized constructors. Create method show() to 	display information.
	Create another class CollegeStudent inherits Student class. Add a new member semester to it. Create default and parameterized constructors. Also override show() method.
	Create another class SchoolStudent inherits Student class. Add a new memberclassname(eg 12 th ,10 th etc.) to it. Create default and parameterized 	constructors. Also override show() method.
	Create a class(say XYZ) with main method that carries out the operation of the project :
has array to store objects of any class(Student or CollegeStudent, SchoolStudent).
create two CollegeStudent and three SchoolStudent record objects and store them inside the array.
display all record from the array.
search record on the basic of rollno and check given rollno is of SchoolStudent or of CollegeStudent.
count how many students are having A grade,if for A grade percentage >75.

Ans -   
	import java.util.Scanner;

class Student {
    private int rollNo;
    private double percentage;
    private static int count = 0;

    public Student() {
        // Default Constructor
    }

    public Student(int rollNo, double percentage) {
        if (percentage > 75) {
            count++;
        }
        this.rollNo = rollNo;
        this.percentage = percentage;

    }

    public static int getAGrade() {

        return count;
    }

    public void show() {

        System.out.println("Roll No. = " + rollNo);
        System.out.println("Percentage = " + percentage + "%");
    }

    public int getRollNO() {
        return rollNo;
    }

    public double getPercent() {
        return percentage;
    }

    public void check(int n) {

    }
}

class CollegeStudent extends Student {
    private int semester;
    private static int countCS = 0;

    public CollegeStudent() {

    }

    public CollegeStudent(int rollNo, double percentage, int semester) {
        super(rollNo, percentage);
        this.semester = semester;

    }

    public void show() {
        countCS++;
        System.out.println("\nCollege Student" + countCS);
        System.out.println("Roll No. = " + getRollNO());
        System.out.println("Percentage = " + getPercent() + "%");
        System.out.println("Semester = " + semester);
    }

    public void check(int n) {

        if (n == getRollNO()) {
            System.out.println("This Roll Number is of College Student.");
        }

    }

}

class SchoolStudent extends Student {
    private String className;
    private static int countSStd = 0;

    public SchoolStudent() {

    }

    public SchoolStudent(int rollNo, double percentage, String className) {
        super(rollNo, percentage);
        this.className = className;
    }

    public void show() {
        countSStd++;
        System.out.println("\nSchool Student" + countSStd);
        System.out.println("Roll No. = " + getRollNO());
        System.out.println("Percentage = " + getPercent() + "%");
        System.out.println("Class = " + className);
    }

    public void check(int n) {

        if (n == getRollNO()) {
            System.out.println("This Roll Number is of School Student.");
        }

    }
}

class TestMain7 {
    public static void main(String args[]) {

        Student[] st = new Student[5];

        st[0] = new CollegeStudent(101, 87.6, 4);
        st[1] = new CollegeStudent(102, 71, 5);
        st[2] = new SchoolStudent(103, 86.6, "10th");
        st[3] = new SchoolStudent(104, 60.6, "11th");
        st[4] = new SchoolStudent(105, 82.2, "12th");

        st[0].show();
        System.out.println("____");
        st[1].show();
        System.out.println("____");
        st[2].show();
        System.out.println("____");
        st[3].show();
        System.out.println("____");
        st[4].show();

        System.out.println("____\n\nNumber of A Grade Students = " + Student.getAGrade());

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter roll number to be Searched !!");
        int n = sc.nextInt();

        st[0].check(n);
        st[1].check(n);
        st[2].check(n);
        st[3].check(n);
        st[4].check(n);

    }
}




9) What is abstract class?. What is interface? Differentiate abstract class and interface.

Ans -   



10) Write down difference b/w abstract class and jdk1.8 interface.

Ans -
	   





11) Create an Abstract class Processor with int member variable data and method showData to display data value.
Create abstract method process() to define processing of member data.
Create a class Factorial using abstract class 	Processor to calculate  and print factorial of a number by overriding the process method.
Create a class Circle using abstract class Processor to calculate and print area of a circle by overriding the process method Ask user to enter choice (factorial or circle area). Also ask data to work upon; Use Processor class reference to achieve this mechanism.

Ans -
	import java.util.Scanner;
	abstract class Processor{
		private int data;

		public Processor(){
			//Default constructor
		}
		public Processor(int data){
			//Parameterized constructor
			this.data = data;
		}

		public int getData(){
			return data;
		}
		public void showData(){
			System.out.println("Data = "+data);
		}

		abstract public void process();

	}

	class Factorial extends Processor{
		public Factorial(){
			
		}

		public Factorial(int n){
			super(n);
		}
		
		public void process(){
			int d = getData();
			int factorial = 1;
			for (int i = 1; i <= d; i++){
				factorial = factorial * i;
			}
			System.out.println("Factorial of "+d+" is "+factorial+".");
		}

	}

	class Circle extends Processor{
		public Circle(){
			
		}

		public Circle(int n){
			super(n);
		}
		
		public void process(){
			int r = getData();
			double area = (double)22/7*r*r;
			System.out.println("Area of circle with radius "+r+" is "+area+".");
		}

	}

	class TestMain7 {
		public static void main(String args[]) {
			Scanner sc = new Scanner(System.in);
			System.out.println("Enter your choice factorial or area of circle!!");
			String choice = sc.nextLine().toUpperCase();
			System.out.println("Enter data on which operation is to be performed!!");
			int data = sc.nextInt();

			if(choice.equals("FACTORIAL")){
				Processor f = new Factorial(data);
				f.showData();
				f.process();
				
			}

			else if(choice.equals("AREA OF CIRCLE")){
				Processor area = new Factorial(data);
				area.showData();
				area.process();
			}

			else{
				System.out.println("Please Enter Valid Input!!");
			}

		}
	}



12) Create Interface Taxable with members salesTax=7% and incomeTax=10.5%. Create abstract method calcTax().
Create class Employee(empId,name,salary) and implement Taxable to calculate incomeTax on yearly salary.
Create class Product(pid,price,quantity) and implement Taxable to calculate salesTax on unit price of product.
Create class for main method(Say XYZ), accept employee information and a product information from user and print income tax and sales tax respectively.

Ans -
	
import java.util.Scanner;

interface Taxable {
    float salesTax = 7f;
    float incomeTax = 10.5f;

    float calcTax();
}

class Employee implements Taxable {
    private int empId;
    private String name;
    private float salary;

    public Employee() {
        System.out.println("Default Constructor - called");
    }

    public Employee(int empId, String name, float salary) {
        this.empId = empId;
        this.name = name;
        this.salary = salary;
    }

    public float calcTax() {
        float taxOnSalary = (incomeTax / 100) * salary;
        return taxOnSalary;
    }

    public void displayTax() {
        System.out.println("\nIncome-tax of " + name + " with Epmloyee-Id " + empId + " and yearly salary of " + salary
                + " is " + calcTax() + " .");
    }
}

class Product implements Taxable {
    private int pId;
    private float price;
    private int quantity;

    public Product() {
        System.out.println("Default Constructor - called");
    }

    public Product(int pId, float price, int quantity) {
        this.pId = pId;
        this.price = price;
        this.quantity = quantity;
    }

    public float calcTax() {
        float taxOnProduct = (salesTax / 100) * price;
        return taxOnProduct;
    }

    public void displayTax() {
        System.out.println(
                "\nSales-tax of product with quantity " + quantity + " , product ID " + pId + " and price/unit of "
                        + price + " is " + calcTax()
                        + " .");
    }
}

class TestMain12 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        // Details of Employee
        System.out.println("Please enter the Employee-ID !!");
        int empId = sc.nextInt();

        System.out.println("Please enter the Name of the employee !!");
        sc.nextLine();
        String name = sc.nextLine();

        System.out.println("Please enter " + name + "'s Salary !!");
        float salary = sc.nextFloat();

        // Details of Product
        System.out.print("\nPlease Press Enter to give product's detail !!");
        sc.nextLine();
        sc.nextLine();

        System.out.println("Please enter the Product-ID !!");
        int pId = sc.nextInt();

        System.out.println("Please enter the Price of the product !!");
        float price = sc.nextFloat();

        System.out.println("Please enter Quantity !!");
        int quantity = sc.nextInt();

        // Objects
        Employee emp1 = new Employee(empId, name, salary);
        emp1.displayTax();

        Product p1 = new Product(pId, price, quantity);
        p1.displayTax();

    }
}



13) Explain the importance of toString() and equals() method of the Object class and override them on class Employee (empId,name,salary).
Create class for main method(say XYZ),and accept five employees information and store in an array. Also ensure if entered empId already exist or not (use equals method).
Display all employee info using toString() method.

Ans -
	# toString() Method :
	1. toString() method is used to get a string representation of an object in the place of hash code.
	2. It's return type is String.
	3. It is present in Object class, which is by default parent class of every class created in Java.

	# equals() Method :
	1. equals() method is used to compare content of two objects is equal or not.
	2. It return boolean value.
	



14) What is the difference b/w jdk1.7 and jdk1.8 interface. Explain jdk1.8 new changes for interface with example.

Ans -
	Difference b/w jdk1.7 and jdk1.8 interface :

	1. Default Methods:

	JDK 1.7: Interfaces could only have abstract methods (methods without implementation).
	JDK 1.8: Introduced default methods, which are methods with a default implementation. This allows adding new methods to interfaces without breaking the existing implementation of 		 classes that use the interface.

	2. Static Methods:

	JDK 1.7: Interfaces could not have static methods.
	JDK 1.8: Interfaces can contain static methods, which can be called on the interface itself.

	3. Functional Interfaces:

	JDK 1.7: There was no formal concept of functional interfaces, although interfaces with a single abstract method existed.
	JDK 1.8: Introduced the 'Functional Interface' annotation to define a functional interface, which is an interface with exactly one abstract method. This is used in the context of 		 lambda expressions and method references.
	



15) Explain functional interface, predicate, lambda expression, method reference and constructor reference with example.

Ans -

	1. Functional Interface :
	A functional interface is an interface with exactly one abstract method.
	This concept is pivotal in Java 8 to support lambda expressions,which provide a clear and concise way to represent instances of single-method interfaces.

	2. Predicate :
	A Predicate is a functional interface that represents a boolean-valued function of one argument.
	It is part of the java.util.function package and is commonly used for filtering or matching.
	
	3. Lambda Expression
	A lambda expression is a concise way to represent an anonymous function.
	It provides a clear and concise syntax to write inline implementations for functional interfaces.

	4. Method Reference
	A method reference is a shorthand notation of a lambda expression to call a method.
	It is used to refer to methods without invoking them.
	Method references are used primarily to pass method names as arguments to other methods.

	5. Constructor Reference
	A constructor reference is similar to a method reference but is used to refer to constructors.
	It allows you to reference a constructor without instantiating the object.




16)  Create a program that helps banks to maintain records. It should havefollowing facilities.
Anybody can create current or saving account with following initial information:account number, name, balance, and branch.
display account detail for a particular accounts.
display total money deposited in bank.
allow deposit and withdrawal in an account .
for saving account opening balance and minimum balance must be 5000.
for current account opening balance and minimum balance must be 1000.
can not withdraw the amount from the account that makes balance less than the minimum balance.

Ans -
import java.util.Scanner;

abstract class Bank {
    protected static int accNo;
    protected String name;
    protected static double balance;
    protected String branch;

    abstract void openAcc();

    abstract void displayDetails();

    abstract void displayBal(int pin);

    abstract void deposit(double depAmt, int pin);

    abstract void withdraw(double withdrawAmt, int pin);

}

class SavingAcc extends Bank {
    private double initialDepAmt;
    private int pin = 5318;
    private int accNo = 999;
    private double balance = 0;

    // Constructor
    public SavingAcc(String name, double initialDepAmt, String branch) {
        this.name = name;
        this.initialDepAmt = initialDepAmt;
        this.branch = branch;
    }

    // Method to Open Account
    public void openAcc() {
        if (initialDepAmt < 5000)
            System.out.println("Minimum Initial Deposit Should be 5000.");

        else {
            accNo = accNo + 1;
            deposit(initialDepAmt, 5318);
        }
    }

    // Method to Display Account Details
    public void displayDetails() {
        System.out.println("Account Number - " + accNo);
        System.out.println("Name - " + name);
        System.out.println("Branch - " + branch);
    }

    // Method to Display Balance
    public void displayBal(int pin) {
        if (this.pin == pin)
            System.out.println("Available Balance - " + balance);
        else
            System.out.println("Incorrect Pin");
    }

    // Method to Deposit
    public void deposit(double depAmt, int pin) {
        if (this.pin != pin)
            System.out.println("Incorrect Pin");

        else {
            balance = balance + depAmt;
        }
    }

    // Method to Withdrawal
    public void withdraw(double withdrawAmt, int pin) {
        if (this.pin != pin)
            System.out.println("Incorrect Pin");

        else if ((balance - withdrawAmt) < 5000)
            System.out.println("Can't withdraw ! \nMinimum balance must be 5000!");

        else {
            balance = balance - withdrawAmt;
        }
    }
}

class CurrentAcc extends Bank {
    private double initialDepAmt;
    private int pin = 1836;
    private int accNo = 999;
    private double balance = 0;

    // Constructor
    public CurrentAcc(String name, double initialDepAmt, String branch) {
        this.name = name;
        this.initialDepAmt = initialDepAmt;
        this.branch = branch;
    }

    // Method to Open Account
    public void openAcc() {
        if (initialDepAmt < 1000)
            System.out.println("Minimum Initial Deposit Should be 1000.");

        else {
            accNo = accNo + 1;
            deposit(initialDepAmt, 1836);
        }
    }

    // Method to Display Account Details
    public void displayDetails() {
        System.out.println("Account Number - " + accNo);
        System.out.println("Name - " + name);
        System.out.println("Branch - " + branch);
    }

    // Method to Display Balance
    public void displayBal(int pin) {
        if (this.pin == pin)
            System.out.println("Available Balance - " + balance);
        else
            System.out.println("Incorrect Pin");
    }

    // Method to Deposit
    public void deposit(double depAmt, int pin) {
        if (this.pin != pin)
            System.out.println("Incorrect Pin");

        else {
            balance = balance + depAmt;
        }
    }

    // Method to Withdrawal
    public void withdraw(double withdrawAmt, int pin) {
        if (this.pin != pin)
            System.out.println("Incorrect Pin");

        else if ((balance - withdrawAmt) < 1000)
            System.out.println("Can't withdraw ! \nMinimum balance must be 1000!");

        else {
            balance = balance - withdrawAmt;
        }
    }
}

class TestMain16 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Welcome to SBI");
        System.out.println("To open your Account :");
        System.out.print("Please Enter your name : ");
        String name1 = sc.nextLine();

        System.out.print("Enter Your Branch : ");
        String branch1 = sc.nextLine();

        System.out.print("Enter Initial deposit : ");
        double initialDep1 = sc.nextDouble();
        sc.nextLine();

        if (initialDep1 < 5000)
            System.out.println("Minimum Initial Deposit Should be 5000.");

        else {
            SavingAcc customer1 = new SavingAcc(name1, initialDep1, branch1);
            customer1.openAcc();
            System.out.println("Account Created");
            for (int i = 1; i != 0; i++) {
                System.out.println("What transaction do you want to perform ?");
                System.out.println("Enter 1 to Display your Account details !");
                System.out.println("Enter 2 to Display your Account-Balance !");
                System.out.println("Enter 3 to Deposit !");
                System.out.println("Enter 4 to withdraw !");
                System.out.println("Enter 0 for none !");

                int choice = sc.nextInt();

                if (choice == 0)
                    break;

                if (choice == 1)
                    customer1.displayDetails();

                if (choice == 2)
                    customer1.displayBal(5318);

                if (choice == 3) {
                    System.out.println("Please enter deposite amount!");
                    double depAmt1 = sc.nextDouble();

                    customer1.deposit(depAmt1, 5318);
                }

                if (choice == 4) {
                    System.out.println("Please enter withdrawal amount!");
                    double wAmt1 = sc.nextDouble();

                    customer1.withdraw(wAmt1, 5318);
                }
            }
        }

    }

}







