Creating a college management system (Academify) in Java SE using JDBC, MySQL, and Java Swing involves careful planning and design. Here's a detailed breakdown of how to structure your project, including the modules, frames, database tables, and their fields, as well as the functionalities for each module.


1. Modules and Functionalities
1.1. User Management Module

Functionalities:
   User Registration (Admin, Faculty, Student)
   User Login
   Password Reset
   Profile Management (Update Profile Information)

1.2. Course Management Module

 Functionalities:
  Add New Courses
  Update Course Details
  Delete Courses
  View Course List

1.3. Student Management Module

 Functionalities:
  Register New Students
  Update Student Information
  View Student Profiles
  Enroll Students in Courses

1.4. Grade Management Module

 Functionalities:
  Enter Grades for Students
  Update Grades
  View Grades
  Calculate GPA

1.5. Attendance Tracking Module

Functionalities:
 Record Student Attendance
 Update Attendance Records
 Generate Attendance Reports

1.6. Communication Module

 Functionalities:
 Send Announcements
 Internal Messaging System
 Notifications

2. Frames (GUI Screens)
You will need several frames to accommodate the functionalities:

2.1. Login Frame

User login interface for different roles.
2.2. Main Dashboard Frame

Navigation to different modules based on user roles (Admin, Faculty, Student).
2.3. User Management Frames

Add/Edit/Delete Users
User List View
2.4. Course Management Frames

Add/Edit/Delete Courses
Course List View
2.5. Student Management Frames

Add/Edit/Delete Students
Student List View
Enrollment Interface
2.6. Grade Management Frames

Enter/Update/View Grades
GPA Calculation Interface
2.7. Attendance Management Frames

Record/Update/View Attendance
Attendance Reports
2.8. Communication Frames

Send/Receive Messages
View Announcements
3. Database Tables and Fields
3.1. Users Table

user_id (INT, Primary Key, Auto Increment)
username (VARCHAR, Unique)
password (VARCHAR)
role (VARCHAR) — e.g., 'admin', 'faculty', 'student'
name (VARCHAR)
email (VARCHAR)
phone (VARCHAR)

3.2. Courses Table

course_id (INT, Primary Key, Auto Increment)
course_name (VARCHAR)
course_description (TEXT)
credits (INT)

3.3. Students Table

student_id (INT, Primary Key, Auto Increment)
name (VARCHAR)
email (VARCHAR)
phone (VARCHAR)
address (TEXT)

3.4. Enrollments Table

enrollment_id (INT, Primary Key, Auto Increment)
student_id (INT, Foreign Key references Students)
course_id (INT, Foreign Key references Courses)
enrollment_date (DATE)
3.5. Grades Table

grade_id (INT, Primary Key, Auto Increment)
student_id (INT, Foreign Key references Students)
course_id (INT, Foreign Key references Courses)
grade (VARCHAR)
3.6. Attendance Table

attendance_id (INT, Primary Key, Auto Increment)
student_id (INT, Foreign Key references Students)
course_id (INT, Foreign Key references Courses)
date (DATE)
status (VARCHAR) — e.g., 'Present', 'Absent'
3.7. Announcements Table

announcement_id (INT, Primary Key, Auto Increment)
title (VARCHAR)
message (TEXT)
date (DATE)
3.8. Messages Table

message_id (INT, Primary Key, Auto Increment)
sender_id (INT, Foreign Key references Users)
receiver_id (INT, Foreign Key references Users)
message (TEXT)
date (DATE)
4. Development Steps
4.1. Database Setup:

Create the MySQL database and tables using SQL scripts.
Ensure all foreign key relationships are correctly set up.
4.2. JDBC Connection:

Implement the JDBC utility class to manage database connections.
4.3. Data Access Objects (DAO):

Develop DAO classes for CRUD operations on each table.
4.4. Business Logic:

Implement service classes to handle business rules and operations.
4.5. User Interface:

Design and implement Java Swing interfaces for each functionality.
Use Swing components like JFrame, JPanel, JButton, JTextField, etc.
4.6. Integration:

Integrate the DAO with the service layer and the GUI.
Ensure proper data flow between the UI and the database.
4.7. Testing:

Test each module thoroughly.
Perform unit testing, integration testing, and user acceptance testing.
4.8. Deployment:

Package the application into a JAR file.
Provide instructions for running the application.



DataBaseWork

mysql -u root -p;
mysql -u Academify -p;

CREATE USER 'Academify'@'localhost/host' IDENTIFIED BY 'Academify';
CREATE USER 'Academify'@'%' IDENTIFIED BY 'Academify';
GRANT ALL PRIVILEGES ON database_name.* TO 'new_username'@'hostname';
SHOW GRANTS FOR 'Academify'@'hostname';
FLUSH PRIVILEGES;
SELECT * FROM mysql.user;
GRANT SELECT, INSERT, UPDATE, DELETE ON Academifydatabase.* TO 'Academify'@'localhost';
REVOKE ALL PRIVILEGES ON *.* FROM 'Academify'@'Academify';

create database Academify;
use Academify;
Database changed

CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    contact VARCHAR(15) NOT NULL,
    role ENUM('student', 'faculty', 'admin') NOT NULL,
    dob DATE,  -- Consider replacing age with date of birth
    gender ENUM('male', 'female', 'other') DEFAULT NULL,  -- Use ENUM for consistent values
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

insert into users(username,password,role,name,email,age,gender,contact)values('lalit.academify@123','Lalit@123','Admin','lalit
 patel','lalitpatel111.da@gmail.com',25,'male','7610713699');



SELECT YEAR(CURDATE()) - YEAR(dob) AS age FROM Users WHERE user_id = 1;



CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    fathers_name VARCHAR(50) NOT NULL,
    mothers_name VARCHAR(50) NOT NULL,
    adhar_no char(12) NOT NULL UNIQUE,
    fathers_occupation VARCHAR(50) NOT NULL,
    category ENUM('General', 'OBC', 'SC', 'ST', 'Other') NOT NULL,
    domicile_of VARCHAR(50) NOT NULL,
    parent_contact VARCHAR(15) NOT NULL,
    mailing_address TEXT NOT NULL,
    course_id INT,
    branch_name VARCHAR(50) NOT NULL,
    enrollment_date DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);







we have to create a project academify (collage management System ) is a desktop app.
in which we use technologies java SE for backend and MySQL for database and GUI/UI
for Java Swing Technology and for all these activities we use NetBeans 8.2 IDE .

academify : in these project we create modules admins,faculties,students 
             the above module is according to me 
           if find some another module according my functionality you can suggest me.  

Admin Module : who can login in application and manage faculties(add,remove,update,view) students(add,remove,update,view)

Manage Course(add new course,remove course,update course details,view couese list)courses for Ug(BE(cs,ec,it,me),Bse(cs,phsics,maths,chemistry),Bca,BBA),Pg(MTech,Mca,Msc)
Announcement(add Announcement message,update Announcement message,delete Announcement message,view Announcement message );

(Updatetion about event exam that will show to All student desktop Page and Faculty desktop page) and can we provide password update datails to admin

can we create sigup page for Admin if we give sign up page how can i manage admin control any one can signup and be a admin.or we can provide admin credetails by default(already store in databases who created databases)

Faculty Module : who can login by provided credetails username and password.
                 who can view his profile and update profile details.
                 and view all student and search any student by enrollement no.
                 and see announcement  given by admin.
                 and A faculty who given authority by admin can Add announcement. 
                      
students Module : who can login by provided credetails username and password.
                  who can view his profile and update profile details.
                  who can see result.
              See FEE(but which module it  manage i am unable to deside and how will)
                   

Database: 

Number of tables According the module and it's Functionality.
also connect tables by foreign key for data fetch from multiple table
tables field and 
also add constrainst to the table field(primary key,foreign key,not null,unique key,default key,check ,auto increment)

GUI:
  
totals Frame in application:
1.SplashScreenFrame
2.DashboardFrame(UserVerifyFrame)
3.AdminLogInFrame (if user login UserType as Admin.)
4.AdminOptionFrame
5.ManageUserFrame
  5.1.ManageFacultiesFrame
    5.1.1.AddFacultyFrame
    5.1.2.UpdateFacultyFrame
    5.1.3.RemoveFacultyFrame
    5.1.4.ViewFacultyFrame
  5.2.ManageStudentsFrame
     5.2.1.AddStudentsFrame
     5.2.2.UpdateStudentsFrame
     5.2.3.RemoveStudentsFrame
     5.2.4.ViewStudentsFrame
  5.2.3.ManageCourseOptionFrame
     5.2.1 ManageUgCourseFrame
      5.2.1.1.ManageBECouese
      5.2.1.2.ManageBSECouese
     5.2.2.ManagePgCurseFrame
       5.2.2.1.ManageMTechCouese
       5.2.2.2.ManageMCACourse

6.FacultyLogInFrame  (if user login UserType as Faculty.)
  6.1.FacultyOptionFrame
   6.1.1. viewProfileFrame 
   6.1.2. updateprofileFrame 
   6.1.3. viewAnnouncementFrame
   6.1.4. SearchanyStudentFrame
   6.1.5   SeeAllStudentFrame
   6.1.5   SeeAllStudentFrame

  

StudentLogInFrame  (if user login UserType as Student.)
   6.1.StudentOptionFrame
    6.1.1. viewProfileFrame 
    6.1.2.updateprofileFrame 
    6.1.3.viewAnnouncementFrame
    6.1.4.checkfeedeatilsFrame




 Tabels : 

CREATE TABLE Admins (
    admin_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,             
    contact VARCHAR(15) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE, 
    password VARCHAR(255) NOT NULL,  
    fathers_name VARCHAR(50) NOT NULL,       
    adhar_no VARCHAR(12) NOT NULL UNIQUE, 
    dob DATE,                           
    address VARCHAR(255)               
    );

INSERT INTO Admins (name, email, password, contact, adhar_no, fathers_name, dob, address)
VALUES ('lalit patel', 'lalitpatel111.da@admin.com', 'lalit.admin', '9876543210', '123412341234', 'Mr.patel', '2000-01-15', '92,indore');

SELECT * FROM Admins WHERE email = 'john.doe@admin.com' AND password = 'encrypted_password';


                    
CREATE TABLE Faculties (
    faculty_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,         
    email VARCHAR(100) NOT NULL UNIQUE, 
    password VARCHAR(255) NOT NULL,     
    contact VARCHAR(15) NOT NULL UNIQUE,
    fathers_name VARCHAR(50) NOT NULL,
    adhar_no VARCHAR(12) NOT NULL UNIQUE,
    department VARCHAR(50) NOT NULL,    
    dob DATE,                           
    address VARCHAR(255)   
    );


INSERT INTO Faculties (name, email,  password, contact, fathers_name, adhar_no,    department,dob, address) VALUES ('Lalit Patel','Lalit.patel@gmail.com','faculty1','9876543210','Mr.patel',123456123456', 'CS','2000-01-15', '92,indore');

SELECT * FROM Faculties WHERE email = 'Lalit.patel@gmail.com' AND password = 'faculty1';


CREATE TABLE Course_Types (
    course_type_id INT PRIMARY KEY AUTO_INCREMENT,
    course_type_name VARCHAR(50) NOT NULL UNIQUE -- e.g., UG, PG
);

INSERT INTO Course_Types (course_type_name) VALUES
('UG'),  -- Undergraduate
('PG');  -- Postgraduate



CREATE TABLE Courses (
    course_id INT PRIMARY KEY AUTO_INCREMENT,
    course_name VARCHAR(100) NOT NULL, -- e.g., BTech, MTech
    course_type_id INT,                -- Foreign key linking to the Course_Types table
    FOREIGN KEY (course_type_id) REFERENCES Course_Types(course_type_id)
);

INSERT INTO Courses (course_name, course_type_id) VALUES
('BSC', 1),-- '1' refers to 'UG' in Course_Types
('BCA', 1),
('BTech', 1),  
('MTech', 2), -- '2' refers to 'PG' in Course_Types
('MCA',2),
('MSC', 2),
('MBA', 2);

CREATE TABLE Branch_Types (
    branch_type_id INT PRIMARY KEY AUTO_INCREMENT,
    branch_name VARCHAR(50) NOT NULL UNIQUE -- e.g., CS, EC, ME
);

INSERT INTO Branch_Types (branch_name) VALUES
('CS'),  -- Computer Science
('EC'),  -- Electronics and Communication
('ME'),  -- Mechanical Engineering
('CE'),  -- Civil Engineering
('CA');  -- Computer Application


CREATE TABLE Branches (
    branch_id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT,  -- Foreign key linking to the Courses table
    branch_type_id INT, -- Foreign key linking to the Branch_Types table
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (branch_type_id) REFERENCES Branch_Types(branch_type_id)
);

-- Linking BTech with its branches

INSERT INTO Branches (course_id, branch_type_id) VALUES
(3, 1),  -- BTech and CS
(3, 2),  -- BTech and EC
(3, 3), -- BTech and ME
(3,4),  -- BTech and CE
(1,1),  -- bsc and CS
(4, 1),  -- MTech and CS
(4, 2);  -- MTech and EC
(6,1),  -- msc and Cs
(2,5);  -- mca and CA





CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,  
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,   
    adhar_no char(12) NOT NULL UNIQUE,
    fathers_name VARCHAR(50) NOT NULL,
    mothers_name VARCHAR(50) NOT NULL,
    contact VARCHAR(15) NOT NULL UNIQUE,  
    fathers_occupation VARCHAR(50) NOT NULL,
    category ENUM('General', 'OBC', 'SC', 'ST', 'Other') NOT NULL,
    domicile_of VARCHAR(50) NOT NULL,
    parent_contact VARCHAR(15) NOT NULL,
    mailing_address TEXT NOT NULL,
    course_type VARCHAR(50) NOT NULL,
    course VARCHAR(50) NOT NULL,
    branch_type VARCHAR(50) NOT NULL,
    course_id INT NOT NULL,
    branch VARCHAR(50) NOT NULL, 
    branch_name VARCHAR(50) NOT NULL,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);



CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,  
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,   
    adhar_no CHAR(12) NOT NULL UNIQUE,
    fathers_name VARCHAR(50) NOT NULL,
    mothers_name VARCHAR(50) NOT NULL,
    contact VARCHAR(15) NOT NULL UNIQUE,  
    fathers_occupation VARCHAR(50) NOT NULL,
    category ENUM('General', 'OBC', 'SC', 'ST', 'Other') NOT NULL,
    domicile_of VARCHAR(50) NOT NULL,
    parent_contact VARCHAR(15) NOT NULL,
    mailing_address TEXT NOT NULL,
    course_id INT NOT NULL, -- Foreign key to Courses table
    branch_id INT NOT NULL, -- Foreign key to Branches table
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (branch_id) REFERENCES Branches(branch_id)
);

enrollment_no VARCHAR(20) NOT NULL UNIQUE, -- Linked to Enrollment table



INSERT INTO Students (name, email, password, adhar_no, fathers_name, mothers_name, contact, fathers_occupation, category, domicile_of, parent_contact, mailing_address, course_id, branch_id) 
VALUES
('Rahul Sharma', 'rahul.sharma@example.com', 'encrypted_password_1', '123456789012', 'Rajesh Sharma', 'Meena Sharma', '9876543210', 'Businessman', 'General', 'Maharashtra', '9876543211', '123, Street Name, City', 1, 1),  -- BTech, CS
('Anita Patel', 'anita.patel@example.com', 'encrypted_password_2', '234567890123', 'Manoj Patel', 'Sita Patel', '8765432109', 'Teacher', 'OBC', 'Gujarat', '8765432110', '456, Another Street, City', 1, 2),  -- BTech, EC
('Vikram Singh', 'vikram.singh@example.com', 'encrypted_password_3', '345678901234', 'Suraj Singh', 'Pooja Singh', '7654321098', 'Engineer', 'SC', 'Uttar Pradesh', '7654321099', '789, Random Street, City', 2, 1),  -- MTech, CS
('Sonia Rao', 'sonia.rao@example.com', 'encrypted_password_4', '456789012345', 'Ramesh Rao', 'Radha Rao', '6543210987', 'Doctor', 'ST', 'Karnataka', '6543210988', '101, Main Road, City', 1, 3),  -- BTech, ME
('Karan Desai', 'karan.desai@example.com', 'encrypted_password_5', '567890123456', 'Dinesh Desai', 'Kavita Desai', '5432109876', 'Lawyer', 'General', 'Maharashtra', '5432109877', '202, Some Avenue, City', 3, 1);  -- BSc, CS



INSERT INTO Students (name, email, password, adhar_no, fathers_name, mothers_name, contact, fathers_occupation, category, domicile_of, parent_contact, mailing_address, course_id, branch_id) 
VALUES
('Anil khede', 'anil.khede@example.com', 'anil', '123456789012', 'Rajesh Sharma', 'Meena Sharma', '9876543210', 'Businessman', 'General', 'Maharashtra', '9876543211', '123, Street Name, City', 3, 1);  -- BTech, CS



CREATE TABLE Semesters (
    semester_id INT PRIMARY KEY AUTO_INCREMENT,
    semester_no INT NOT NULL, -- 1, 2, 3...
    course_id INT, -- Links to Courses
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Subjects (
    subject_id INT PRIMARY KEY AUTO_INCREMENT,
    subject_name VARCHAR(100) NOT NULL,
    branch_id INT, -- Links to specific branches
    semester_id INT, -- Links to specific semesters
    course_id INT, -- Links to specific courses
    FOREIGN KEY (branch_id) REFERENCES Branches(branch_id),
    FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);


enrollment_no VARCHAR(20) NOT NULL UNIQUE,


CREATE TABLE Enrollment (
    enrollment_id INT PRIMARY KEY AUTO_INCREMENT,
    enrollment_no VARCHAR(20) NOT NULL UNIQUE, -- e.g., 2024CS001, 2024EC001
    branch_id INT, -- Branch of the student
    student_id INT, -- Links to Students table
    course_id INT, -- Links to Courses table
    FOREIGN KEY (branch_id) REFERENCES Branches(branch_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);


CREATE TABLE EnrollmentCounter (
    branch_id INT,
    last_number INT DEFAULT 0,
    FOREIGN KEY (branch_id) REFERENCES Branches(branch_id)
);


String year = "2024";
String branchCode = getBranchCode(branch_id); // e.g., "CS" or "EC"
int lastEnrollmentNumber = getLastEnrollmentNumber(branch_id); // e.g., from EnrollmentCounter table
String enrollmentNo = year + branchCode + String.format("%03d", lastEnrollmentNumber + 1);

